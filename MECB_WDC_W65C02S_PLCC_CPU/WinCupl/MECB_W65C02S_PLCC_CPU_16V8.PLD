Name            MECB_W65C02S_PLCC_CPU_16V8;
Partno          CA0001;
Revision        01;
Date            06/2025;
Designer        Greg;
Company         Digicool Things;
Location        None;
Assembly        None;
Device          g16v8as;

/****************************************************************/
/*                                                              */
/* Note: For an ATV16V8 in Simple Mode pins 15 and 16           */
/*  (center macrocells) are permanently configured as           */
/*  combinatorial outputs.                                      */   
/*                                                              */
/****************************************************************/

/*
 * Inputs: Address Inputs were assigned based on the ECB bus pin sequence (for ease of PCB routing).
 * Active low pins are inverted at the pin so all signals can be consistently treated as positive logic.
 *
 */

Pin 1 = !ioaddr;
Pin 2 = clk;
Pin 3 = cpu_phi2o;
Pin 4 = cpu_rw;

Pin 7 = a19;
Pin [9, 6, 11, 8, 5] = [a15..a11];
field mem_addr = [a15..a11];


/*
 * Outputs:  define outputs
 * Active low pins are inverted at the pin so all signals can be consistently treated as positive logic.
 *
 */

Pin 12 = !ecb_mreq;
Pin 13 = ecb_clk;
Pin 14 = !cs_rom0;
Pin 15 = !cs_ram;
Pin 16 = !cs_rom1;
Pin 17 = !ecb_iorq;
Pin 18 = !ecb_rd;
Pin 19 = !ecb_wr;


/*
 *
 * Logic: W65C02S PLCC CPU Card - Default Bus Control  
 *
 * ecb_mreq : ioaddr not asserted, while clk high.
 * ecb_iorq : ioaddr asserted, while clk high.
 * ecb_clk : clk
 * ecb_rd : cpu_rw is high, while clk high.
 * ecb_wr : cpu_rw is low, while clk high.
 *
 */

ecb_mreq = !ioaddr & clk;
ecb_iorq =  ioaddr & clk;
ecb_clk = clk;
ecb_rd = cpu_rw & clk;
ecb_wr = !cpu_rw & clk;


/*
 *
 * Logic: W65C02S PLCC CPU Card - Alternative Bus Control
 * 
 * Remove clk constraint on ecb_mreq, to allow for slower ROM on over-clocked 6502
 * Team with appropriate Chip Select block, which re-introduces clk for RAM Chip Select    
 *
 * ecb_mreq : ioaddr not asserted.
 * ecb_iorq : ioaddr asserted, while clk high.
 * ecb_clk : clk
 * ecb_rd : cpu_rw is high, while clk high.
 * ecb_wr : cpu_rw is low, while clk high.
 *
 */
/*
ecb_mreq = !ioaddr;
ecb_iorq =  ioaddr & clk;
ecb_clk = clk;
ecb_rd = cpu_rw & clk;
ecb_wr = !cpu_rw & clk;
*/

/*
 * Memory Map options follow (un-comment only one!)
 */

/*
 *
 * Logic: W65C02S PLCC CPU Card - Default Chip Selects for 48K RAM 16K ROM 
 *
 * cs_ram  : RAM address space (0x0000 - 0xBFFF), while mreq asserted.
 * cs_rom0 : ROM address space (0xC000 - 0xFFFF), while mreq asserted and A19 low.
 * cs_rom1 : ROM address space (0xC000 - 0xFFFF), while mreq asserted and A19 high.
 *
 */

cs_ram = ecb_mreq & mem_addr:[0000..BFFF];
cs_rom0 = ecb_mreq & !a19 & mem_addr:[C000..FFFF];
cs_rom1 = ecb_mreq & a19 & mem_addr:[C000..FFFF];


/*
 *
 * Logic: W65C02S PLCC CPU Card - Alternative Chip Selects for 56K RAM 8K ROM 
 *
 * cs_ram  : RAM address space (0x0000 - 0xDFFF), while mreq asserted.
 * cs_rom0 : ROM address space (0xE000 - 0xFFFF), while mreq asserted and A19 low.
 * cs_rom1 : ROM address space (0xE000 - 0xFFFF), while mreq asserted and A19 high.
 *
 */
/*
cs_ram = ecb_mreq & mem_addr:[0000..DFFF];
cs_rom0 = ecb_mreq & !a19 & mem_addr:[E000..FFFF];
cs_rom1 = ecb_mreq & a19 & mem_addr:[E000..FFFF];
*/


/*
 *
 * Logic: W65C02S PLCC CPU Card - Alternative Chip Selects for 32K RAM 32K ROM 
 *
 * cs_ram  : RAM address space (0x0000 - 0x7FFF), while mreq asserted.
 * cs_rom0 : ROM address space (0x8000 - 0xFFFF), while mreq asserted and A19 low.
 * cs_rom1 : ROM address space (0x8000 - 0xFFFF), while mreq asserted and A19 high.
 *
 */
/*
cs_ram = ecb_mreq & mem_addr:[0000..7FFF];
cs_rom0 = ecb_mreq & !a19 & mem_addr:[8000..FFFF];
cs_rom1 = ecb_mreq & a19 & mem_addr:[8000..FFFF];
*/


/*
 *
 * Logic: W65C02S PLCC CPU Card - CreatiVision re-Creation Chip Selects for 4K RAM 48K ROM
 *
 * cs_ram  : RAM address space (0x0000 - 0x0FFF), while clk asserted.
 * cs_rom0 : ROM0 adress space (0x4000 - 0xFFFF), while clk asserted and A19 low
 * cs_rom1 : ROM1 adress space (0x4000 - 0xFFFF), while clk asserted and A19 high
 *
 * NOTE: We don't utilise mreq as we are not reserving ioaddr space.
 */
/*
cs_ram = ecb_clk & mem_addr:[0000..0FFF];
cs_rom0 = ecb_clk & !a19 & mem_addr:[4000..FFFF];
cs_rom1 = ecb_clk & a19 & mem_addr:[4000..FFFF];
*/
